//
// Created by franc on 5/31/2025.
//

#pragma once

/** Mutex for protecting global ML dataset. */
  std::set<T> m_visited_states_ML;

std::map<T,int> m_states_scores;

/*Make this a struct maybe*/
int m_current_nodes_ML = 0;
int m_threshold_node_generation_ML = 50000; //Actual value of final nodes no matter what
double m_threshold_node_generation_log_ML = std::log(m_threshold_node_generation_ML*3); // times 3 to allow for some room given the action executability as this is just use as criteron on what start proabilistics prune
int m_total_possible_nodes_log_ML; //Possible nodes generated by the complete DFS
bool m_goal_recently_found_ML = false;
double m_discard_augmentation_factor_ML = 0; // Tracks augmentation for non-discarded paths
int m_goal_founds_ML = 0;


/*     std::unordered_map<std::string, int> m_special_nodes = {
        {"AND", 0},
        {"OR", 1},
        {"NOT", 2},
        {"F_AND", 3},
        {"F_OR", 4}
    }; */
//std::unordered_map<std::string, bool> m_node_printed;
std::map<fluent, int> m_fluent_to_id;
std::map<agent, int> m_agent_to_id;



/** Internal function to create a dataset for ML heuristics training. */
bool ML_dataset_creation(ML_Dataset_Params* ML_dataset);

/** Launches the dataset generation by DFS or BFS. */
bool dataset_launcher(const std::string& fpath, int max_depth, bool useDFS, const std::string& goal_str);

/** Serial DFS dataset generation worker. */
bool dataset_DFS_serial(T& initial_state, int max_depth, action_set* actions, const std::string& goal_str, std::vector<std::string>& global_dataset, bool bisimulation);

/** DFS recursive worker to explore states for dataset generation. */
int dataset_DFS_worker(T& state, int depth, int max_depth, action_set* actions, const std::string& goal_str, std::vector<std::string>& local_dataset, bool bisimulation);

/** Formats a single row of the dataset CSV file. */
std::string format_row(T& state, int depth, int score, const std::string& goal_str);


// Function declarations
int get_id_from_map(const std::map<boost::dynamic_bitset<>, int>& id_map,
                    const boost::dynamic_bitset<>& key,
                    const std::string& type_name);

void populate_ids_from_bitset(const std::set<boost::dynamic_bitset<>>& keys_set,
                              std::map<boost::dynamic_bitset<>, int>& id_map,
                              int start_id);

int get_unique_f_id_from_map(fluent fl);
int get_unique_a_id_from_map(agent ag);

void populate_fluent_ids(int start_id);
void populate_agent_ids(int start_id);

const std::string& generate_goal_tree(const std::string& goal_file_name);

void print_goal_subtree(const belief_formula& to_print, int goal_counter, int& next_id,
                        const std::string& parent_node, std::ofstream&);
